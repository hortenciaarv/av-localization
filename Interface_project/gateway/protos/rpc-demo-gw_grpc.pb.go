// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: rpc-demo-gw.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WrapperClient is the client API for Wrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WrapperClient interface {
	UploadPose(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Position, error)
	UploadImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Image, error)
}

type wrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewWrapperClient(cc grpc.ClientConnInterface) WrapperClient {
	return &wrapperClient{cc}
}

func (c *wrapperClient) UploadPose(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/RPCDemoPkg.Wrapper/UploadPose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wrapperClient) UploadImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/RPCDemoPkg.Wrapper/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WrapperServer is the server API for Wrapper service.
// All implementations must embed UnimplementedWrapperServer
// for forward compatibility
type WrapperServer interface {
	UploadPose(context.Context, *Empty) (*Position, error)
	UploadImage(context.Context, *Empty) (*Image, error)
	mustEmbedUnimplementedWrapperServer()
}

// UnimplementedWrapperServer must be embedded to have forward compatible implementations.
type UnimplementedWrapperServer struct {
}

func (UnimplementedWrapperServer) UploadPose(context.Context, *Empty) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPose not implemented")
}
func (UnimplementedWrapperServer) UploadImage(context.Context, *Empty) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedWrapperServer) mustEmbedUnimplementedWrapperServer() {}

// UnsafeWrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WrapperServer will
// result in compilation errors.
type UnsafeWrapperServer interface {
	mustEmbedUnimplementedWrapperServer()
}

func RegisterWrapperServer(s grpc.ServiceRegistrar, srv WrapperServer) {
	s.RegisterService(&Wrapper_ServiceDesc, srv)
}

func _Wrapper_UploadPose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperServer).UploadPose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPCDemoPkg.Wrapper/UploadPose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperServer).UploadPose(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wrapper_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPCDemoPkg.Wrapper/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperServer).UploadImage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Wrapper_ServiceDesc is the grpc.ServiceDesc for Wrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RPCDemoPkg.Wrapper",
	HandlerType: (*WrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadPose",
			Handler:    _Wrapper_UploadPose_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _Wrapper_UploadImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc-demo-gw.proto",
}
